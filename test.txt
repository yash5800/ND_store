import aiohttp
import asyncio
import json
import base64
import os
import time

# Replace with your GitHub username, repository name, and access token
username = os.getenv('USER')
repository = os.getenv('REPO')
access_token = os.getenv('MY_API')
commit_message = 'Add file via Flask'

print(f"my key:{access_token}")

async def upload_to_github(file_content, file_name):
    base_url = f'https://api.github.com/repos/{username}/{repository}/contents/'
    headers = {'Authorization': f'token {access_token}', 'Content-Type': 'application/json'}
    file_name = file_name.replace(" ", "")

    async with aiohttp.ClientSession() as session:
        # Check if the file already exists
        async with session.get(base_url + file_name, headers=headers) as response:
            if response.status == 200:
                # File exists, modify the file name by appending a timestamp
                timestamp = time.strftime("%Y%m%d-%H%M%S")
                file_name = f"{timestamp}_{file_name}"
                print(f"File with the same name exists. Renamed to {file_name}")

        # Chunked upload
        CHUNK_SIZE = 1 * 1024 * 1024  # 1 MB chunks
        chunks = [file_content[i:i + CHUNK_SIZE] for i in range(0, len(file_content), CHUNK_SIZE)]
        sha = None

        for i, chunk in enumerate(chunks):
            encoded_content = base64.b64encode(chunk).decode('utf-8')
            payload = {
                'message': f'Adding chunk {i+1} of {len(chunks)}',
                'content': encoded_content,
                'branch': 'main'
            }
            if sha:
                payload['sha'] = sha

            payload = json.dumps(payload)
            retries = 0
            success = False

            while retries < 3:
                try:
                    async with session.put(base_url + file_name, headers=headers, data=payload) as response:
                        if response.status in [200, 201]:
                            response_json = await response.json()
                            sha = response_json.get('content', {}).get('sha')
                            print(f"Chunk {i+1} uploaded successfully")
                            success = True
                            break
                        else:
                            print(f"Error uploading chunk {i+1}: {response.status} - {await response.text()}")
                except aiohttp.ClientError as e:
                    print(f"Error during chunk upload {i+1}: {e}")

                retries += 1
                print(f"Retrying chunk {i+1} upload ({retries}/3)")

            if not success:
                return False, file_name

    return True, file_name

async def delete_from_github(file_name):
    base_url = f'https://api.github.com/repos/{username}/{repository}/contents/'
    headers = {'Authorization': f'token {access_token}', 'Content-Type': 'application/json'}
    file_name = file_name.replace(" ", "")

    async with aiohttp.ClientSession() as session:
        # Get the file's SHA
        async with session.get(base_url + file_name, headers=headers) as response:
            if response.status == 200:
                response_json = await response.json()
                sha = response_json.get('sha')
                delete_url = base_url + file_name
                payload = {
                    'message': f'Deleting {file_name}',
                    'sha': sha,
                    'branch': 'main'
                }

                # Attempt to delete the file
                async with session.delete(delete_url, headers=headers, data=json.dumps(payload)) as response:
                    if response.status == 200:
                        print(f"File {file_name} deleted successfully.")
                        return True
                    else:
                        print(f"Failed to delete file {file_name}: {response.status} - {await response.text()}")
                        return False
            else:
                print(f"File {file_name} not found or cannot be accessed: {response.status} - {await response.text()}")
                return False

async def main():
    # Example usage
    file_content = b'This is a test file content'  # Replace with actual file content
    file_name = 'testfile.txt'  # Replace with actual file name

    upload_success, uploaded_file_name = await upload_to_github(file_content, file_name)
    if upload_success:
        print(f"Uploaded file: {uploaded_file_name}")

    delete_success = await delete_from_github(uploaded_file_name)
    if delete_success:
        print(f"Deleted file: {uploaded_file_name}")

if __name__ == '__main__':
    asyncio.run(main())
